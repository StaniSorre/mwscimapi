/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 2.19.0
 */

package vdm.namespaces.zscpaidasrv;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.s4hana.connectivity.ErpConfigContext;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.s4hana.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;
import vdm.namespaces.zscpaidasrv.field.FornitoreField;
import vdm.namespaces.zscpaidasrv.selectable.FornitoreSelectable;
import vdm.services.ZSCPAIDASRVService;


/**
 * <p>Original entity name from the Odata EDM: <b>Fornitore</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Fornitore
    extends VdmEntity<Fornitore>
{

    /**
     * Selector for all available fields of Fornitore.
     * 
     */
    public final static FornitoreSelectable ALL_FIELDS = new FornitoreSelectable() {


        @Nonnull
        @Override
        public String getFieldName() {
            return "*";
        }

        @Nonnull
        @Override
        public List<String> getSelections() {
            return Collections.singletonList("*");
        }

    }
    ;
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Lifnr</b></p>
     * 
     * @return
     *     The lifnr contained in this entity.
     */
    @Key
    @SerializedName("Lifnr")
    @JsonProperty("Lifnr")
    @Nullable
    @ODataField(odataName = "Lifnr")
    private String lifnr;
    /**
     * Use with available fluent helpers to apply the <b>Lifnr</b> field to query operations.
     * 
     */
    public final static FornitoreField<String> LIFNR = new FornitoreField<String>("Lifnr");
    /**
     * Constraints: Not nullable, Maximum length: 35 <p>Original property name from the Odata EDM: <b>Descr</b></p>
     * 
     * @return
     *     Nome
     */
    @SerializedName("Descr")
    @JsonProperty("Descr")
    @Nullable
    @ODataField(odataName = "Descr")
    private String descr;
    /**
     * Use with available fluent helpers to apply the <b>Descr</b> field to query operations.
     * 
     */
    public final static FornitoreField<String> DESCR = new FornitoreField<String>("Descr");
    /**
     * Constraints: Not nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>Piva</b></p>
     * 
     * @return
     *     Partita IVA
     */
    @SerializedName("Piva")
    @JsonProperty("Piva")
    @Nullable
    @ODataField(odataName = "Piva")
    private String piva;
    /**
     * Use with available fluent helpers to apply the <b>Piva</b> field to query operations.
     * 
     */
    public final static FornitoreField<String> PIVA = new FornitoreField<String>("Piva");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Zzvmdcui</b></p>
     * 
     * @return
     *     CUI
     */
    @SerializedName("Zzvmdcui")
    @JsonProperty("Zzvmdcui")
    @Nullable
    @ODataField(odataName = "Zzvmdcui")
    private String zzvmdcui;
    /**
     * Use with available fluent helpers to apply the <b>Zzvmdcui</b> field to query operations.
     * 
     */
    public final static FornitoreField<String> ZZVMDCUI = new FornitoreField<String>("Zzvmdcui");

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<Fornitore> getType() {
        return Fornitore.class;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Lifnr</b></p>
     * 
     * @param lifnr
     *     The lifnr to set.
     */
    public void setLifnr(
        @Nullable
        final String lifnr) {
        rememberChangedField("Lifnr", this.lifnr);
        this.lifnr = lifnr;
    }

    /**
     * Constraints: Not nullable, Maximum length: 35 <p>Original property name from the Odata EDM: <b>Descr</b></p>
     * 
     * @param descr
     *     Nome
     */
    public void setDescr(
        @Nullable
        final String descr) {
        rememberChangedField("Descr", this.descr);
        this.descr = descr;
    }

    /**
     * Constraints: Not nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>Piva</b></p>
     * 
     * @param piva
     *     Partita IVA
     */
    public void setPiva(
        @Nullable
        final String piva) {
        rememberChangedField("Piva", this.piva);
        this.piva = piva;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Zzvmdcui</b></p>
     * 
     * @param zzvmdcui
     *     CUI
     */
    public void setZzvmdcui(
        @Nullable
        final String zzvmdcui) {
        rememberChangedField("Zzvmdcui", this.zzvmdcui);
        this.zzvmdcui = zzvmdcui;
    }

    @Override
    protected String getEntityCollection() {
        return "FornitoreSet";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("Lifnr", getLifnr());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("Lifnr", getLifnr());
        values.put("Descr", getDescr());
        values.put("Piva", getPiva());
        values.put("Zzvmdcui", getZzvmdcui());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("Lifnr")) {
                final Object value = values.remove("Lifnr");
                if ((value == null)||(!value.equals(getLifnr()))) {
                    setLifnr(((String) value));
                }
            }
            if (values.containsKey("Descr")) {
                final Object value = values.remove("Descr");
                if ((value == null)||(!value.equals(getDescr()))) {
                    setDescr(((String) value));
                }
            }
            if (values.containsKey("Piva")) {
                final Object value = values.remove("Piva");
                if ((value == null)||(!value.equals(getPiva()))) {
                    setPiva(((String) value));
                }
            }
            if (values.containsKey("Zzvmdcui")) {
                final Object value = values.remove("Zzvmdcui");
                if ((value == null)||(!value.equals(getZzvmdcui()))) {
                    setZzvmdcui(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >FornitoreField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new FornitoreField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >FornitoreField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new FornitoreField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public ErpConfigContext getErpConfigContext() {
        return super.getErpConfigContext();
    }

    /**
     * 
     * @deprecated
     *     Use {@link #attachToService(String, ErpConfigContext)} instead.
     */
    @Override
    @Deprecated
    public void setErpConfigContext(
        @Nullable
        final ErpConfigContext erpConfigContext) {
        super.setErpConfigContext(erpConfigContext);
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nullable
        final ErpConfigContext configContext) {
        super.attachToService(servicePath, configContext);
    }

    @Override
    protected String getDefaultServicePath() {
        return ZSCPAIDASRVService.DEFAULT_SERVICE_PATH;
    }

}
